// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persist;

#nullable disable

namespace Persist.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241012072522_ApplicationFeature")]
    partial class ApplicationFeature
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CustomerEntityFeatureEntity", b =>
                {
                    b.Property<string>("CustomerHaveAccessToAFeatureId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomersWhoCanUseFeatureId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CustomerHaveAccessToAFeatureId", "CustomersWhoCanUseFeatureId");

                    b.HasIndex("CustomersWhoCanUseFeatureId");

                    b.ToTable("CustomerEntityFeatureEntity");
                });

            modelBuilder.Entity("Persist.Entities.Application.ApplicationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Internal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Persist.Entities.Application.FeatureEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationEntityId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EverybodyCouldUseIt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrenium")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationEntityId");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("Persist.Entities.Application.StepEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FeatureId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("NotObligatory")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PreviousStepId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PreviousStepId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Step");
                });

            modelBuilder.Entity("Persist.Entities.Auth.HashPasswordEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsForgotten")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("HashPassword");
                });

            modelBuilder.Entity("Persist.Entities.Auth.RefreshTokenEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("OldToken")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Persist.Entities.Auth.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HashPasswordId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshTokenId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HashPasswordId");

                    b.HasIndex("RefreshTokenId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.CustomerEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FirstInteraction")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FiscalIdentification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastInteraction")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.ErrorEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("InterventionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SeverityId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ServerId");

                    b.HasIndex("SeverityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Error");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.ServerEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("Cost")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerWhoOwnServerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("HasToMakeSupportSince")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("HostedSince")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StopHost")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerWhoOwnServerId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Server");
                });

            modelBuilder.Entity("Persist.Entities.Catalyst.JoiningTable.TagCategoryTagEntity", b =>
                {
                    b.Property<string>("TagEntityId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TagCategoryEntityId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TagEntityId", "TagCategoryEntityId");

                    b.HasIndex("TagCategoryEntityId");

                    b.ToTable("TagCategoriesTag");
                });

            modelBuilder.Entity("Persist.Entities.Catalyst.TagCategoryEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("TagCategories");
                });

            modelBuilder.Entity("Persist.Entities.Catalyst.TagEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Persist.Entities.CustomerHaveLicenceToApplicationEntity", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("BeginingSupport")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndingSupport")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CustomerId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("CustomerHaveLicenceToApplications");
                });

            modelBuilder.Entity("Persist.Entities.ErrorStatusEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ErrorStatus");
                });

            modelBuilder.Entity("Persist.Entities.JoiningTable.ApplicationDeployedOnServerEntity", b =>
                {
                    b.Property<string>("ServerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ServerId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ApplicationDeployedOnServer");
                });

            modelBuilder.Entity("Persist.Entities.SeverityLevelEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SeverityLevel");
                });

            modelBuilder.Entity("CustomerEntityFeatureEntity", b =>
                {
                    b.HasOne("Persist.Entities.Application.FeatureEntity", null)
                        .WithMany()
                        .HasForeignKey("CustomerHaveAccessToAFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.BaseTable.CustomerEntity", null)
                        .WithMany()
                        .HasForeignKey("CustomersWhoCanUseFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persist.Entities.Application.FeatureEntity", b =>
                {
                    b.HasOne("Persist.Entities.Application.ApplicationEntity", null)
                        .WithMany("Features")
                        .HasForeignKey("ApplicationEntityId");
                });

            modelBuilder.Entity("Persist.Entities.Application.StepEntity", b =>
                {
                    b.HasOne("Persist.Entities.Application.FeatureEntity", "Feature")
                        .WithMany("Steps")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.Application.StepEntity", "PreviousStep")
                        .WithMany("NextSteps")
                        .HasForeignKey("PreviousStepId");

                    b.Navigation("Feature");

                    b.Navigation("PreviousStep");
                });

            modelBuilder.Entity("Persist.Entities.Auth.HashPasswordEntity", b =>
                {
                    b.HasOne("Persist.Entities.Auth.UserEntity", null)
                        .WithMany("OldppHashPasswords")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Persist.Entities.Auth.RefreshTokenEntity", b =>
                {
                    b.HasOne("Persist.Entities.Auth.UserEntity", null)
                        .WithMany("OldRefreshTokens")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Persist.Entities.Auth.UserEntity", b =>
                {
                    b.HasOne("Persist.Entities.Auth.HashPasswordEntity", "HashPasswordEntity")
                        .WithMany()
                        .HasForeignKey("HashPasswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.Auth.RefreshTokenEntity", "RefreshToken")
                        .WithMany()
                        .HasForeignKey("RefreshTokenId");

                    b.Navigation("HashPasswordEntity");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.ErrorEntity", b =>
                {
                    b.HasOne("Persist.Entities.Application.ApplicationEntity", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.BaseTable.ServerEntity", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.SeverityLevelEntity", "Severity")
                        .WithMany("Errors")
                        .HasForeignKey("SeverityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.ErrorStatusEntity", "Status")
                        .WithMany("Errors")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Server");

                    b.Navigation("Severity");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.ServerEntity", b =>
                {
                    b.HasOne("Persist.Entities.BaseTable.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerWhoOwnServerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Persist.Entities.Catalyst.JoiningTable.TagCategoryTagEntity", b =>
                {
                    b.HasOne("Persist.Entities.Catalyst.TagCategoryEntity", "TagCategoryEntity")
                        .WithMany("TagCategoryTags")
                        .HasForeignKey("TagCategoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.Catalyst.TagEntity", "TagEntity")
                        .WithMany("TagCategoryTags")
                        .HasForeignKey("TagEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagCategoryEntity");

                    b.Navigation("TagEntity");
                });

            modelBuilder.Entity("Persist.Entities.CustomerHaveLicenceToApplicationEntity", b =>
                {
                    b.HasOne("Persist.Entities.Application.ApplicationEntity", "Application")
                        .WithMany("CustomerHaveLicenceToApplication")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.BaseTable.CustomerEntity", "Customer")
                        .WithMany("CustomerHaveLicenceToApplication")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Persist.Entities.JoiningTable.ApplicationDeployedOnServerEntity", b =>
                {
                    b.HasOne("Persist.Entities.Application.ApplicationEntity", "Application")
                        .WithMany("ApplicationDeployedOnServers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persist.Entities.BaseTable.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Persist.Entities.BaseTable.ServerEntity", "Server")
                        .WithMany("ApplicationDeployedOnServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Customer");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Persist.Entities.Application.ApplicationEntity", b =>
                {
                    b.Navigation("ApplicationDeployedOnServers");

                    b.Navigation("CustomerHaveLicenceToApplication");

                    b.Navigation("Features");
                });

            modelBuilder.Entity("Persist.Entities.Application.FeatureEntity", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Persist.Entities.Application.StepEntity", b =>
                {
                    b.Navigation("NextSteps");
                });

            modelBuilder.Entity("Persist.Entities.Auth.UserEntity", b =>
                {
                    b.Navigation("OldRefreshTokens");

                    b.Navigation("OldppHashPasswords");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.CustomerEntity", b =>
                {
                    b.Navigation("CustomerHaveLicenceToApplication");
                });

            modelBuilder.Entity("Persist.Entities.BaseTable.ServerEntity", b =>
                {
                    b.Navigation("ApplicationDeployedOnServers");
                });

            modelBuilder.Entity("Persist.Entities.Catalyst.TagCategoryEntity", b =>
                {
                    b.Navigation("TagCategoryTags");
                });

            modelBuilder.Entity("Persist.Entities.Catalyst.TagEntity", b =>
                {
                    b.Navigation("TagCategoryTags");
                });

            modelBuilder.Entity("Persist.Entities.ErrorStatusEntity", b =>
                {
                    b.Navigation("Errors");
                });

            modelBuilder.Entity("Persist.Entities.SeverityLevelEntity", b =>
                {
                    b.Navigation("Errors");
                });
#pragma warning restore 612, 618
        }
    }
}
